type User {
  id: ID!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  createdAt: String!
  updatedAt: String!
}

type Coordinates {
  latitude: Float!
  longitude: Float!
}

type WeatherData {
  date: String
  temperature: Float
  feelsLike: Float
  humidity: Int
  windSpeed: Float
  description: String
  icon: String
  precipitation: Float
  uvIndex: Float
}

type Weather {
  current: WeatherData
  forecast: [WeatherData]
  lastUpdated: String
}

type OpeningHours {
  monday: String
  tuesday: String
  wednesday: String
  thursday: String
  friday: String
  saturday: String
  sunday: String
}

type Contact {
  phone: String
  email: String
}

type Price {
  amount: Float!
  currency: String!
}

type SocialMedia {
  facebook: String
  instagram: String
  twitter: String
  youtube: String
}

type Trail {
  id: ID!
  name: String!
  difficulty: String!
  length: Float!
  verticalDrop: Float!
  status: String!
  features: [String!]
  description: String
  imageUrl: String
}

type BikePark {
  id: ID!
  name: String!
  createdBy: User!
  createdAt: String!
  description: String
  location: String
  features: [String!]
  difficulty: String
  rating: Float
  reviews: [Review!]
  imageUrl: String
  address: String
  coordinates: Coordinates
  openingHours: OpeningHours
  contact: Contact
  price: Price
  facilities: [String!]
  rules: [String!]
  photos: [String!]
  videos: [String!]
  website: String
  socialMedia: SocialMedia
  status: String
  lastUpdated: String
  updatedAt: String
  weather: Weather
  trails: [Trail!]
}

type Review {
  id: ID!
  rating: Float!
  comment: String!
  title: String
  bikePark: ID!
  createdBy: User!
  visitDate: String
  trailDifficulty: String
  photos: [String]
  createdAt: String!
  updatedAt: String
}

type Event {
  id: ID!
  title: String!
  date: String!
  startTime: String!
  endTime: String!
  location: String!
  category: EventCategory!
  price: Float!
  imageUrl: String!
  description: String!
  capacity: Int!
  registrationEndDate: String!
  availableTickets: Int!
  attendeeCount: Int!
  featured: Boolean!
  organizer: Organizer!
  schedule: [ScheduleItem!]!
  venue: Venue!
  createdAt: String!
  updatedAt: String!
}

type Organizer {
  name: String!
  description: String!
  imageUrl: String!
}

type ScheduleItem {
  time: String!
  title: String!
  description: String!
}

type Venue {
  name: String!
  address: String!
  mapImageUrl: String!
}

enum EventCategory {
  CHAMPIONSHIP
  WORKSHOP
  FESTIVAL
  GROUP_RIDE
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

input EventFilter {
  search: String
  category: EventCategory
  location: String
  startDate: String
  endDate: String
  minPrice: Float
  maxPrice: Float
  featured: Boolean
}

type Query {
  me: User
  bikeParks(filter: BikeParkFilter): PaginatedBikeParks!
  bikePark(id: ID!): BikePark
  reviews(bikeParkId: ID!, page: Int, limit: Int): PaginatedReviews!
  searchBikeParks(query: String!): [BikePark!]!
  bikeParksByViewport(viewport: ViewportInput!, searchQuery: String): [BikePark!]!
  events(filter: EventFilter): [Event!]!
  event(id: ID!): Event
}

type Mutation {
  register(
    username: String!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    confirmPassword: String!
  ): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  updateProfile(name: String, email: String): User!
  createBikePark(
    name: String!
    description: String
    location: String
    features: [String!]
    difficulty: String
    address: String
    coordinates: CoordinatesInput
    imageUrl: String
    openingHours: OpeningHoursInput
    contact: ContactInput
    price: PriceInput
    facilities: [String!]
    rules: [String!]
    photos: [String!]
    videos: [String!]
    website: String
    socialMedia: SocialMediaInput
    status: String
  ): BikePark!
  updateBikePark(id: ID!, input: UpdateBikeParkInput!): BikePark!
  deleteBikePark(id: ID!): Boolean!
  createReview(bikeParkId: ID!, rating: Float!, comment: String!, title: String, visitDate: String, trailDifficulty: String, photos: [String]): Review!
  updateReview(id: ID!, rating: Float, comment: String): Review!
  deleteReview(id: ID!): Boolean!
  createEvent(input: CreateEventInput!): Event!
  updateEvent(id: ID!, input: UpdateEventInput!): Event!
  deleteEvent(id: ID!): Boolean!
  registerForEvent(id: ID!): Event!
}

type AuthPayload {
  token: String!
  user: User!
}

input CoordinatesInput {
  latitude: Float!
  longitude: Float!
}

input OpeningHoursInput {
  monday: String
  tuesday: String
  wednesday: String
  thursday: String
  friday: String
  saturday: String
  sunday: String
}

input ContactInput {
  phone: String
  email: String
}

input PriceInput {
  amount: Float!
  currency: String!
}

input SocialMediaInput {
  facebook: String
  instagram: String
  twitter: String
  youtube: String
}

input UpdateBikeParkInput {
  name: String
  description: String
  location: String
  features: [String!]
  difficulty: String
  address: String
  coordinates: CoordinatesInput
  imageUrl: String
  openingHours: OpeningHoursInput
  contact: ContactInput
  price: PriceInput
  facilities: [String!]
  rules: [String!]
  photos: [String!]
  videos: [String!]
  website: String
  socialMedia: SocialMediaInput
  status: String
}

input BikeParkFilter {
  location: String
  name: String
  difficulty: String
  features: [String!]
  facilities: [String!]
  coordinates: CoordinatesSearchInput
  sortBy: String
  skip: Int
  take: Int
}

input CoordinatesSearchInput {
  latitude: Float!
  longitude: Float!
  radius: Float
}

input PaginationInput {
  page: Int!
  limit: Int!
}

input ViewportInput {
  northEast: CoordinatesInput!
  southWest: CoordinatesInput!
}

type PaginatedBikeParks {
  bikeParks: [BikePark!]!
  totalCount: Int!
  currentPage: Int!
  totalPages: Int!
  hasNextPage: Boolean!
}

type PaginatedReviews {
  reviews: [Review!]!
  totalCount: Int!
  currentPage: Int!
  totalPages: Int!
  hasNextPage: Boolean!
}

input CreateEventInput {
  title: String!
  date: String!
  startTime: String!
  endTime: String!
  location: String!
  category: EventCategory!
  price: Float!
  imageUrl: String!
  description: String!
  capacity: Int!
  registrationEndDate: String!
  featured: Boolean
  organizer: OrganizerInput!
  schedule: [ScheduleItemInput!]!
  venue: VenueInput!
}

input UpdateEventInput {
  title: String
  date: String
  startTime: String
  endTime: String
  location: String
  category: EventCategory
  price: Float
  imageUrl: String
  description: String
  capacity: Int
  registrationEndDate: String
  featured: Boolean
  organizer: OrganizerInput
  schedule: [ScheduleItemInput!]
  venue: VenueInput
}

input OrganizerInput {
  name: String!
  description: String!
  imageUrl: String!
}

input ScheduleItemInput {
  time: String!
  title: String!
  description: String!
}

input VenueInput {
  name: String!
  address: String!
  mapImageUrl: String!
}

scalar JSON
